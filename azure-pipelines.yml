# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
  - repo: self

variables:
  dockerRegistryServiceConnection: 'Container Registry Backend'
  imageRepository: 'backend'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  dockerNamespace: 'containerbackpetsus.azurecr.io'
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build and push stage
    variables:
      - group: Development
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: replacetokens@5
            inputs:
              targetFiles: '**/application.properties'
              encoding: 'auto'
              tokenPattern: 'custom'
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'continue'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy
    jobs:
      - job:
        displayName: Deploy
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Subscription(#key)'
              appType: 'webAppContainer'
              WebAppName: 'petsus-backend'
              DockerNamespace: '$(dockerNamespace)'
              DockerRepository: '$(imageRepository)'
              DockerImageTag: '$(tag)'
              
